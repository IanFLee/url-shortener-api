 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

// call packages
var fs = require('fs');
const express = require('express');
const mongodb = require('mongodb');

var app = express();


if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

var MongoClient = mongodb.MongoClient;

var url = process.env.URL;
var x;


// middleware ??
app.use('/public', express.static(process.cwd() + '/public'));

MongoClient.connect(url, function(err, db){
  if (err) {console.log('unable to. error is '+err)}
  else {
    console.log('connected to '+url);
    var collection = db.collection('url-shortener');
    x = collection;
    var doc1 = {'hello':'doc1'};
    var doc2 = {'hello':'doc2'};
    var lotsOfDocs =[{'hello': 'doc3'}, {'hello':'doc4'}];
    collection.insert(doc1);
    collection.insert(doc2, {'w':1}, function(err, result){});
    collection.insert(lotsOfDocs, {w:1}, function(err, result){});
    console.log('finshed insert');
    x = doc2;
    }
    
     
     
    
    db.close();
  }
);

app.get("/", function(req, res){
  res.send(x);
})

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

