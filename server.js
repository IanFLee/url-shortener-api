 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

// call packages
var fs = require('fs');
const express = require('express');
const path = require('path');
const bodyParser = require('body-parser');
const mongodb = require('mongodb');
var ObjectID = mongodb.ObjectID;

var app = express();
var CONTACTS_COLLECTION = "contacts";


if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}


app.use(express.static(__dirname+"/public"));
app.use(bodyParser.json());

// create a database connection variable outside of the database connection callback
// to reuse the connection pool in the app
var db;

// connect to the db before starting the app server
mongodb.MongoClient.connect(process.env.URL, function(err, database) {
  if (err) {console.log(err); process.exit(1);}
  
  // save db obj from callback for reuse
  db = database;
  console.log('database connection ready');
  
  //
});

var user = {
  "user" : process.env.M_LAB_USERNAME,
  "pwd" : process.env.M_LAB_PASSWORD,
  "roles" : [
      {
          "role" : "userAdminAnyDatabase",
          "db" : "url-shortener"
      }
  ]
};


app.get("/", function(req, res){
  res.send(x);
})


// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

